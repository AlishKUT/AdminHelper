const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const db = new sqlite3.Database('database.db');

// --- Middleware (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û –º–∞—Ä—à—Ä—É—Ç–æ–≤!) ---
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());
app.use(express.static('public'));
app.set('view engine', 'ejs');
app.set('views', './views');

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü ---
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS tmc (id INTEGER PRIMARY KEY, name TEXT)`);
  db.run(`CREATE TABLE IF NOT EXISTS links (id INTEGER PRIMARY KEY, label TEXT, url TEXT)`);
  db.run(`CREATE TABLE IF NOT EXISTS contractors (id INTEGER PRIMARY KEY, group_name TEXT, email TEXT, note TEXT)`);
});

// --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
app.get('/', (req, res) => {
  db.all(`SELECT * FROM tmc`, (_, tmc) => {
    db.all(`SELECT * FROM links`, (_, links) => {
      db.all(`SELECT * FROM contractors`, (_, contractors) => {
        res.render('index', { tmc, links, contractors });
      });
    });
  });
});

// --- –î–æ–±–∞–≤–∏—Ç—å –¢–ú–¶ ---
app.post('/tmc', (req, res) => {
  db.run(`INSERT INTO tmc (name) VALUES (?)`, [req.body.name], () => res.redirect('/'));
});

// --- –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É ---
app.post('/link', (req, res) => {
  db.run(`INSERT INTO links (label, url) VALUES (?, ?)`, [req.body.label, req.body.url], () => res.redirect('/'));
});

// --- –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ ---
app.post('/contractor', (req, res) => {
  db.run(
    `INSERT INTO contractors (group_name, email, note) VALUES (?, ?, ?)`,
    [req.body.group, req.body.email, req.body.note || ''],
    () => res.redirect('/')
  );
});

// --- –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ ---
app.post('/contractor/delete', (req, res) => {
  console.log('======= –ó–ê–ü–†–û–° –ù–ê –£–î–ê–õ–ï–ù–ò–ï =======');
  console.log('Content-Type:', req.headers['content-type']);
  console.log('BODY:', req.body);

  const { email, group } = req.body;

  if (!email || !group) {
    console.log('‚ùå –ù–µ—Ç email –∏–ª–∏ group');
    return res.status(400).send('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  }

  db.run(`DELETE FROM contractors WHERE email = ? AND group_name = ?`, [email.trim(), group.trim()], function (err) {
    if (err) {
      console.error('‚ùå SQLite –æ—à–∏–±–∫–∞:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }

    if (this.changes === 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return res.status(404).send('–ù–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:', email);
    return res.sendStatus(200);
  });
});

// --- –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É ---
app.post('/link/delete', (req, res) => {
  console.log('======= –ó–ê–ü–†–û–° –ù–ê –£–î–ê–õ–ï–ù–ò–ï –°–°–´–õ–ö–ò =======');
  console.log('Content-Type:', req.headers['content-type']);
  console.log('BODY:', req.body);

  let { id } = req.body;

  if (!id) {
    console.log('‚ùå ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return res.status(400).send('ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }

  // SQLite —Ç—Ä–µ–±—É–µ—Ç —á–∏—Å–ª–∞
  id = parseInt(id);
  if (isNaN(id)) {
    console.log('‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω:', typeof id, id);
    return res.status(400).send('ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  }

  console.log('üîÑ –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É —Å ID:', id);

  db.run(`DELETE FROM links WHERE id = ?`, [id], function (err) {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', err.message);
      return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }

    if (this.changes === 0) {
      console.log('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å ID:', id);
      return res.status(404).send('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ ID=${id}, –∏–∑–º–µ–Ω–µ–Ω–∏–π:`, this.changes);
    res.sendStatus(200);
  });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});